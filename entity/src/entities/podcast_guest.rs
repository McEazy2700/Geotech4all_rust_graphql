//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "podcast_guest")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub organization_id: Option<i64>,
    pub image: Option<String>,
    pub date_added: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::common_organization::Entity",
        from = "Column::OrganizationId",
        to = "super::common_organization::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CommonOrganization,
    #[sea_orm(has_many = "super::podcast_podcast_guests::Entity")]
    PodcastPodcastGuests,
}

impl Related<super::common_organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CommonOrganization.def()
    }
}

impl Related<super::podcast_podcast_guests::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PodcastPodcastGuests.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
