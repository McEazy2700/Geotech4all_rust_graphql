//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users_customuser")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub password: String,
    #[sea_orm(unique)]
    pub email: String,
    pub is_staff: bool,
    pub is_superuser: bool,
    pub is_active: bool,
    pub category: String,
    pub last_login: Option<DateTimeWithTimeZone>,
    pub date_joined: DateTimeWithTimeZone,
    pub first_name: Option<String>,
    pub last_name: Option<String>,
    pub username: Option<String>,
    pub full_name: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::blog_comment::Entity")]
    BlogComment,
    #[sea_orm(has_many = "super::blog_post::Entity")]
    BlogPost,
    #[sea_orm(has_many = "super::django_admin_log::Entity")]
    DjangoAdminLog,
    #[sea_orm(has_one = "super::graphql_auth_userstatus::Entity")]
    GraphqlAuthUserstatus,
    #[sea_orm(has_many = "super::podcast_host::Entity")]
    PodcastHost,
    #[sea_orm(has_many = "super::refresh_token_refreshtoken::Entity")]
    RefreshTokenRefreshtoken,
    #[sea_orm(has_many = "super::users_customuser_groups::Entity")]
    UsersCustomuserGroups,
    #[sea_orm(has_many = "super::users_customuser_user_permissions::Entity")]
    UsersCustomuserUserPermissions,
    #[sea_orm(has_one = "super::users_profile::Entity")]
    UsersProfile,
    #[sea_orm(has_one = "super::users_staff::Entity")]
    UsersStaff,
}

impl Related<super::blog_comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogComment.def()
    }
}

impl Related<super::blog_post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPost.def()
    }
}

impl Related<super::django_admin_log::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DjangoAdminLog.def()
    }
}

impl Related<super::graphql_auth_userstatus::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GraphqlAuthUserstatus.def()
    }
}

impl Related<super::podcast_host::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PodcastHost.def()
    }
}

impl Related<super::refresh_token_refreshtoken::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RefreshTokenRefreshtoken.def()
    }
}

impl Related<super::users_customuser_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersCustomuserGroups.def()
    }
}

impl Related<super::users_customuser_user_permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersCustomuserUserPermissions.def()
    }
}

impl Related<super::users_profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersProfile.def()
    }
}

impl Related<super::users_staff::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersStaff.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
