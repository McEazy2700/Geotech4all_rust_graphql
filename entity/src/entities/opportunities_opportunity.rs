//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "opportunities_opportunity")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub title: String,
    pub date_added: DateTimeWithTimeZone,
    pub last_updated: DateTimeWithTimeZone,
    #[sea_orm(column_type = "Text", nullable)]
    pub content: Option<String>,
    pub description: Option<String>,
    pub organization_id: Option<i64>,
    pub location_id: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::common_location::Entity",
        from = "Column::LocationId",
        to = "super::common_location::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CommonLocation,
    #[sea_orm(
        belongs_to = "super::common_organization::Entity",
        from = "Column::OrganizationId",
        to = "super::common_organization::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CommonOrganization,
    #[sea_orm(has_many = "super::opportunities_opportunity_tags::Entity")]
    OpportunitiesOpportunityTags,
}

impl Related<super::common_location::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CommonLocation.def()
    }
}

impl Related<super::common_organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CommonOrganization.def()
    }
}

impl Related<super::opportunities_opportunity_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OpportunitiesOpportunityTags.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
